#!/usr/local/bin/bash

export GOPATH="${HOME}/gocode"
export PATH="${GOPATH}/bin":$PATH

SUCCESS_CODE=0
ERROR_CODE=1

# calculate time
calculate_time() {
    if [ "$start_time" == "" ]; then
        start_time=$(date +%s)
    elif [ "$end_time" == "" ]; then
        end_time=$(date +%s)
    else
        printf "\n It takes %s seconds bitmarkd connect\n" "$(( $end_time - $start_time ))"
    fi
}

check_script_result() {
    if [ $# -ne 1 ]; then
        printf "error argument, expect 1 but get $#"
        exit $ERROR_CODE
    fi

    if [ $? -ne $SUCCESS_CODE ]; then
        printf "execute $1 fail, abort..."
        clean_up
        exit $ERROR_CODE
    fi
}

clean_up_programs=(
    "bitmarkd"
    "recorderd"
    "bitcoind"
    "litecoind"
)

clean_up() {
    for program in "${clean_up_programs[@]}"
    do
        pkill -f "${program}"
    done
}

# run crypto programs
~/bin/run-crypto
check_script_result "run-crypto"

# start of time calculation: bitmarkd connect
start_time=""
end_time=""
calculate_time

processes=("bitcoind" "litecoind")
for process in "${processes[@]}"
do
    if ! pgrep "$process" &> /dev/null; then
        printf "\n%s is not started, abort...\n" "$process"
        clean_up
        exit $ERROR_CODE
    fi
done

# setup bitmarkd if bitmarkd config not exist
~/bin/setup-bitmarkd
check_script_result "setup-bitmarkd"

# run bitmarkd
array=("1" "2" "3" "4" "5")
for number in "${array[@]}"
do
    printf "\nStart bitmarkd ${number}"
    cd "${HOME}/.config/bitmarkd${number}"
    nohup bitmarkd --config-file="bitmarkd${number}.conf" start >/dev/null 2>&1 &

    # wait for bitmarkd to initialize tcp, only for node number 3, 4
    if [ "$number" == "3" ] || [ "$number" == "4" ]; then
        sleep 150
    fi

    if [ "$number" == "2" ]; then
        sleep 230
    fi
done

~/bin/setup-recorderd
check_script_result "setup-recorderd"

# run recorderd
printf "\nRun recorderd...\n"
~/bin/run-recorderd
check_script_result "run-recorderd"

# check connection, at leat 3 servers should be connected
node_number=0
array=("1" "2" "3" "4" "5")
for number in "${array[@]}"
do
    normal_mode=$(curl -s -k "https://localhost:2${number}31/bitmarkd/details" | jq | grep -c Normal)
    if [ $normal_mode -ne 0 ]; then
        printf "\nnode ${number} in Normal mode, cli port 2${number}30, https port 2${number}31\n"
        node_number=$number
        break 1                 # break 1 levels of loop
    fi
done

# end of time calculation: bitmarkd connect
calculate_time
