local M = {}

-- helper functions
function read_file(name)
   local f, err = io.open(M.data_directory .. "/" .. name, "r")
   if f == nil then
      return nil
   end
   local r = f:read("*a")
   f:close()
   return r
end

-- "." is a special case - it uses the path from the configuration file
-- as the data directory.  Use ${CURDIR} for working directory.
-- all keys and logs are relative to this directory
-- unless the are overridden with absolute paths.
--data_directory = "."
--data_directory = "${CURDIR}"
M.data_directory = "."

-- optional pid file if not absolute path then is created relative to
-- the data directory
--M.pidfile = "recorderd.pid"

-- select the chain of the network for peer connections
-- cross chain networking connects will not work
--chain = bitmark
--chain = testing
M.chain = "local"

-- number of background hashing threads
-- default: number of CPUs
M.threads = 4

-- connect to bitmarkd
M.peering = {
   -- the miners keys
   public_key = read_file("recorderd.public"),
   private_key = read_file("recorderd.private"),

   -- connections to bitmarkd nodes
   connect = {
      -- {
      --    public_key = "1e489bd364f20781098a7778027feab0aa8927c0240a6c35010da498a718cc2f",
      --    blocks = "127.0.0.1:2540",
      --    submit = "127.0.0.1:2541"
      -- },
      -- {
      --    public_key = "89993263d9c0f4d556523d5a8488a46adb7458bed922925ecfbf606d12c9db50",
      --    blocks = "127.0.0.1:2440",
      --    submit = "127.0.0.1:2441"
      -- },
      -- {
      --    public_key = "b334797d7a85a090fcce40f1c16ec8d233b9220ef49f6ad61df01ab0c7f20f0a",
      --    blocks = "127.0.0.1:2340",
      --    submit = "127.0.0.1:2341"
      -- },
      {
         public_key = "9423c4fecf3d70bfff74e770741e5f3443255283270f2f0cb1e69d60e2109a73",
         blocks = "127.0.0.1:2240",
         submit = "127.0.0.1:2241"

      },
      {
         public_key = "8143eed224e578290e8dae85bd25be0910113d71aa896745b600fc7c8ac6b944",
         blocks = "127.0.0.1:2140",
         submit = "127.0.0.1:2141"
      }
   }
}

-- logging configuration
M.logging = {
   size = 1048576,
   count = 20,

   -- set the logging level for various modules
   -- modules not overridden with get the value from DEFAULT
   -- the default value for DEFAULT is "critical"
   levels = {
      DEFAULT = "debug",
      -- DEFAULT = "debug",

      -- data
      mode = "debug",

      -- other
      main = "debug"
   }
}

return M
