#!/usr/local/bin/bash
set -e

ERROR_CODE=1
SUCCESS_CODE=0

# stop existing running bitmarkd
while pgrep bitmarkd >/dev/null
do
    echo stopping bitmarkd...
    pkill bitmarkd

    # wait 5 seconds to check
    echo checking...
    sleep 5
done
echo all bitmarkd are stopped
exit 0

# compile bitmarkd
package="github.com/bitmark-inc/bitmarkd"
package_dir="${GOPATH}/src/${package}"
bin_dir="${GOPATH}/bin"

# remove existing bitmarkd
[ -d "${package_dir}" ] && go clean "${package}"
[ -d "${package_dir}" ] && rm -r "${package_dir}"
# remove executable files if any exist
[ -e "${GOPATH}/bin/bitmarkd" ] && rm "${GOPATH}/bin/bitmarkd"
[ -e "${GOPATH}/bin/bitmark-cli" ] && rm "${GOPATH}/bin/bitmark-cli"
[ -e "${GOPATH}/bin/bitmark-info" ] && rm "${GOPATH}/bin/bitmark-info"
[ -e "${GOPATH}/bin/bitmark-dumpdb" ] && rm "${GOPATH}/bin/bitmark-dumpdb"

# download latest bitmarkd
echo downloading bitmarkd...
go get -u -v "${package}" || true # avoid error message or no Go files in ...
cd ${package_dir}
go get -u -v ./...
cd ~

echo "entering directory ${package_dir}"
cd "${package_dir}"

# setup third party libraries
echo setup third party libraries
# git submodule update --init

# compile
echo compiling...
go build -v ./...
go install -v ./...

if [ ! -f "${bin_dir}/bitmarkd" ]; then
    echo bitmarkd build fail...
    exit ERROR_CODE
else
    echo bitmarkd build success
fi

# create config directory if not exist
config_dir="${HOME}/.config"
if [ ! -d "${config_dir}" ]; then
    mkdir -p "${config_dir}"
fi

# generate bitmarkd config
echo "generating bitmarkd configurations..."
array=("1" "2" "3" "4" "5")
for number in "${array[@]}"
do
    # due to new bitcoin config, there exist some problem parsing bitcoin rpc port
    # disable following line for now
    printf "\nSkip generating new config...\n"
    # ~/bin/generate-bitmarkd-configuration -c local -n freebuilder.bitmark.lan -b "${HOME}/conf/bitcoin.conf" -l "${HOME}/conf/litecoin.conf" -u "${number}"

    # make sure every time a clean start, backup data directory
    printf "\nBacking up bitmarkd ${number} data directory, remove log/peer data...\n"
    dir="${config_dir}/bitmarkd${number}"
    if [ -d "${dir}/data" ]; then
        # remove backup directory if exist
        [ -d "${dir}/data-backup" ] && rm -r "${dir}/data-backup"

        [ -d "${dir}/data"] && mv "${dir}/data" "${dir}/data-backup"
    fi

    # remove existing log files
    [ -d "${dir}/log" ] && find "${dir}/log" -name "bitmarkd.log\.[0-9]*" -delete

    # remove peer data
    [ -e "${dir}/peers-local.json" ] && rm "${dir}/peers-local.json"


    # printf "\nBacking up bitmarkd ${number} data directory, remove log/peer data...\n"
    # dir="${config_dir}/bitmarkd${number}"
    # if [ -d "${dir}/data" ]; then
        # remove backup directory if exist
        # [ -d "${dir}/data-backup" ] && rm -r "${dir}/data-backup"

        # mv "${dir}/data" "${dir}/data-backup"
    # fi

    # remove existing log files
    # [ -d "${dir}/log" ] && find "${dir}/log" -name "bitmarkd.log\.[0-9]*" -delete

    # remove peer data
    # [ -e "${dir}/peers-local.json" ] && rm "${dir}/peers-local.json"
done

