#!/bin/sh
# script to create a new bitmarkd instance

ERROR()
{
  printf 'error: '
  printf "$@"
  printf '\n'
  exit 1
}

VERBOSE()
{
  if [ X"${verbose}" = X"yes" ]
  then
    printf "$@"
    printf '\n'
  fi
}

WARNING()
{
  printf 'WARNING: '
  printf "$@"
  printf '\n'
}

USAGE()
{
  if [ -n "$1" ]
  then
    printf 'error: '
    printf "$@"
    printf '\n'
  fi
  echo usage: $(basename "$0") '[options] index-numbers...'
  echo '       --help                -h            this message'
  echo '       --verbose             -v            more messages'
  echo '       --chain=chain         -c CHAIN      set the chain [local|testing|bitmark]: ['"${network}"']'
  echo '       --nodes=DOMAIN        -n DOMAIN     set the nodes [none|chain|nodes.domain.tld]: ['"${nodes}"']'
  echo '       --connect=K:H:P       -C K:H:P      connect to specific bitmarkd public_key:host:port'
  echo '       --bitcoin=DIR|FILE    -b DIR|FILE   set bitcoin access from bitcoin.conf'
  echo '       --litecoin=DIR|FILE   -l DIR|FILE   set litecoin access from litecoin.conf'
  echo '       --discovery=DIR|FILE  -d DIR|FILE   set discovery proxy from discovery.conf'
  echo '       --console             -k            log to console'
  echo '       --more                -m            more logging output'
  echo '       --update              -u            overwrite an existing configuration, does not change exiting keys'
  echo '       --debug               -D            debuging messages'
  exit 1
}


# main program
verbose=no
prefix_local=20
prefix_testing=50
prefix_bitmark=70
chain=local
nodes=none
bitmark_connect=
bitcoin_conf=
litecoin_conf=
discovery_conf=
proxy=no
log_size=1048576
log_count=100
log_console=no
log_default=info
debug=no
update=no

testnet_only=''
livenet_only='#'


getopt=
for g in /usr/local/bin/getopt /usr/local/opt/gnu-getopt/bin/getopt /usr/bin/getopt
do
  [ -x "${g}" ] && getopt="${g}" && break
done
[ -x "${getopt}" ] || ERROR 'no suitable getopt was found'
args=$(${getopt} -o hvc:n:C:b:l:d:kmuD --long=help,verbose,chain:,nodes:,connect:,bitcoin:,litecoin:,discovery:,console,more,update,debug -- "$@") || exit 1

# replace the arguments with the parsed values
eval set -- "${args}"

while :
do
  case "$1" in
    (-v|--verbose)
      verbose=yes
      ;;

    (-c|--chain)
      testnet_only=''
      livenet_only='#'
      case "$2" in
        (live|bitmark)
          chain=bitmark
          testnet_only='#'
          livenet_only=''
          ;;
        (test|testing)
          chain=testing
          ;;
        (local)
          chain=local
          ;;
        (*)
          ERROR 'invalid chain: %s' "$2"
          ;;
      esac
      shift
      ;;

    (-n|--nodes)
      case "$2" in
        (none|chain)
          nodes="$2"
          ;;
        (*.*)
          nodes="$2"
          n=$(host -t TXT "${nodes}")
          [ $? -ne 0 ] && USAGE 'nodes cannot fetch TXT record for: "%s"' "${nodes}"
          [ -z "${n}" ] && USAGE 'nodes cannot empty TXT record for: "%s"' "${nodes}"
          ;;
        (*)
          ERROR 'invalid nodes: %s' "$2"
          ;;
      esac
      shift
      ;;

    (-C|--connect)
      conn="$2"
      [ -z "${conn}" ] && USAGE 'bitmarkd connect cannot be empty'
      shift
      bitmarkd_connect="${bitmarkd_connect} ${conn}"
      ;;

    (-d|--discovery)
      discovery_conf="$2"
      [ -z "${discovery_conf}" ] && USAGE 'discovery configuration cannot be empty'
      [ -d "${discovery_conf}" ] && discovery_conf="${discovery_conf}/discovery.conf"
      shift
      proxy=yes
      ;;

    (-b|--bitcoin)
      bitcoin_conf="$2"
      [ -z "${bitcoin_conf}" ] && USAGE 'bitcoin configuration cannot be empty'
      [ -d "${bitcoin_conf}" ] && bitcoin_conf="${bitcoin_conf}/bitcoin.conf"
      shift
      ;;

    (-l|--litecoin)
      litecoin_conf="$2"
      [ -z "${litecoin_conf}" ] && USAGE 'litecoin configuration cannot be empty'
      [ -d "${litecoin_conf}" ] && litecoin_conf="${litecoin_conf}/litecoin.conf"
      shift
      ;;

    (-k|--console)
      log_console=yes
      ;;

    (-m|--more)
      log_default=debug
      ;;

    (-u|--update)
      update=yes
      ;;

    (-D|--debug)
      debug=yes
      ;;

    (--)
      shift
      break
      ;;

    (-h|--help)
      USAGE
      ;;

    (*)
      USAGE 'invalid option: %s' "$1"
      ;;
  esac
  shift
done

# verify arguments
[ $# -eq 0 ] && USAGE "missing arguments"

# enable debugging
[ X"${debug}" = X"yes" ] && set -x

get_url() {
  local conf ip port path json
  conf="$1"; shift
  ip="$1"; shift
  port="$1"; shift
  path="$1"; shift

  json=$(ucl_tool --format=compact_json --in="${conf}")

  json=$(ucl_tool --format=compact_json --in="${conf}")

  ip=$(printf '%s' "${json}" | jq --raw-output '(.rpcbind // "'"${ip}"'")')
  port=$(printf '%s' "${json}" | jq --raw-output '(.rpcport // "'"${port}"'")')

  printf 'http://%s:%s%s' "${ip}" "${port}" "${path}"
}

get_endpoint() {
  local name conf ip port json protocol ip2 port2
  name="$1"; shift
  conf="$1"; shift
  ip="$1"; shift
  port="$1"; shift

  json=$(ucl_tool --format=compact_json --in="${conf}")

  protocol=$(printf '%s' "${json}" | jq --raw-output '.'"${name}"'|split(":")[0]')
  ip2=$(printf '%s' "${json}" | jq --raw-output '.'"${name}"'|split(":")[1]')
  port2=$(printf '%s' "${json}" | jq --raw-output '.'"${name}"'|split(":")[2]')

  ip2="${ip2#//}"
  [ X"${ip2}" = X'*' ] && ip2="${ip}"
  [ -z "${port2}" ] && port2="${port}"

  printf '%s:%s' "${ip2}" "${port2}"
}

if [ X"${proxy}" = X"yes" ]
then
  # all discovery conf must exist

  #check if URL:host:pub:rep form is specified
  if [ X"${discovery_conf#URL:}" != X"${discovery_conf}" ]
  then
    d="${discovery_conf#URL:}"
    d_host="${d%%:*}"
    d="${d#*:}"
    d_pub="${d%%:*}"
    d="${d#*:}"
    d_rep="${d%%:*}"
    [ -z "${d_host}" ] && ERROR 'cannot determine discovery host from: %s' "${discovery_conf}"
    [ -z "${d_pub}" ] && ERROR 'cannot determine discovery pub from: %s' "${discovery_conf}"
    [ -z "${d_rep}" ] && ERROR 'cannot determine discovery rep from: %s' "${discovery_conf}"
    discovery_pub="${d_host}:${d_pub}"
    discovery_rep="${d_host}:${d_rep}"

  else

    # must be a config file
    [ -f "${discovery_conf}" ] || USAGE 'missing discovery configuration: %s' "${discovery_conf}"

    discovery_pub=$(get_endpoint pub_endpoint "${discovery_conf}" "127.0.0.1" 17008)
    [ -z "${discovery_pub}" ] && ERROR 'cannot determine discovery pub from: %s' "${discovery_conf}"

    discovery_rep=$(get_endpoint rep_endpoint "${discovery_conf}" "127.0.0.1" 17009)
    [ -z "${discovery_rep}" ] && ERROR 'cannot determine discovery rep from: %s' "${discovery_conf}"

  fi

  # dummy coin configurations as these are not used when proxy is on
  bitcoin_url=$(get_url /dev/null "127.0.0.1" 8332 /rest)
  litecoin_url=$(get_url /dev/null "127.0.0.1" 9332 /rest)

else
  # all coin conf must exist
  [ -f "${bitcoin_conf}" ] || USAGE 'missing bitcoin configuration: %s' "${bitcoin_conf}"
  [ -f "${litecoin_conf}" ] || USAGE 'missing litecoin configuration: %s' "${litecoin_conf}"

  bitcoin_url=$(get_url "${bitcoin_conf}" "127.0.0.1" 8332 /rest)
  [ -z "${bitcoin_url}" ] && ERROR 'cannot determine bitcoin rest url from: %s' "${bitcoin_conf}"

  litecoin_url=$(get_url "${litecoin_conf}" "127.0.0.1" 9332 /rest)
  [ -z "${litecoin_url}" ] && ERROR 'cannot determine litecoin rest url from: %s' "${litecoin_conf}"
fi

connections=
for conn in ${bitmarkd_connect}
do
  public_key="${conn%%:*}"
  address="${conn#*:}"
  connections="${connections}$(printf '\n  connect {\n    public_key = %s\n    address = %s\n  }' "${public_key}" "${address}")"
done


# process all arguments can be 1..99 or T1..T99 0r L1..L99
# T = testnet   L = livenet
for i in "$@"
do
  external_net_comment=
  j="${i#[LT]}"
  [ X"${j}" != X"${i}" ] && external_net_comment='#'

  [ "${j}" -lt 1 -o "${j}" -gt 99 ] && ERROR 'index is out of range: %s' "${i}"

  dir="${HOME}/.config/bitmarkd${i}"
  config="${dir}/bitmarkd.conf"

  # stop if a config exists and not update
  [ X"${update}" = X"no" ] && [ -d "${dir}" -o -f "${config}" ] && ERROR 'index: %s is already used: %s' "${i}" "${dir}"

  eval prefix_base=\"\${prefix_${chain}}\"
  prefix=$((prefix_base + j))
  [ -d "${dir}" ] || mkdir -p "${dir}"

  VERBOSE 'config: %s  ports: %dXX' "${config}" "${prefix}"

  cat > "${config}" <<EOF
# bitmarkd.conf  -*- mode: libucl -*-

# "." is a special case - it uses the path from the configuration file
# as the data directory.
# all certificates, logs and LevelDB files are relative to this  directory
# unless the are overridden with absolute paths.
data_directory = "."

# optional pid file if not absolute path then is created relative to
# the data directory
#pidfile = bitmarkd.pid

# select the chain of the network for peer connections
# cross chain networking connects will not work
#chain = bitmark
#chain = testing
chain = ${chain}

# select the default node configuration
# choose from: none, chain OR sub.domain.tld
nodes = ${nodes}


# Bitmark Vault clients connect using JSON RPC to these listening ports
client_rpc {

  maximum_connections = 50

  listen = 127.0.0.1:${prefix}30
  listen = "[::1]:${prefix}30"

  # announce certain public IP:ports to network
  # if using firewall port forwarding use the firewall external IP:port
  ${external_net_comment}announce = 127.0.0.1:${prefix}30
  ${external_net_comment}announce = "[::1]:${prefix}30"

  certificate = rpc.crt
  private_key = rpc.key

}

# https connection for rpc services and status requests
https_rpc {
  maximum_connections = 50

  # POST /bitmarkd/rpc          (unrestricted: json body as client rpc)
  # GET  /bitmarkd/details      (protected: more data than Node.Info))
  # GET  /bitmarkd/peers        (protected: list of all peers and their public key)
  # GET  /bitmarkd/connections  (protected: list of all outgoing peer connections)

  listen = 127.0.0.1:${prefix}31
  listen = "[::1]:${prefix}31"

  # IPs that can access the /bitmarkd/* GET APIs
  # default is deny
  allow {
    details = 127.0.0.1
    details = "[::1]"
    connections = 127.0.0.1
    connections = "[::1]"
    peers = 127.0.0.1
    peers = "[::1]"
  }

  # this example shares keys with client rpc
  certificate = rpc.crt
  private_key = rpc.key
}

# peer-to-peer networking configuration
peering {

  # set false to prevent additional connections
  dynamic_connections = true

  # set to false to only use IPv4 for outgoing connections
  prefer_ipv6 = true

  listen = 127.0.0.1:${prefix}36
  listen = "[::1]:${prefix}36"

  # announce certain public IP:ports to network
  # if using firewall port forwarding use the firewall external IP:port
  ${external_net_comment}announce = 127.0.0.1:${prefix}36
  ${external_net_comment}announce = "[::1]:${prefix}36"
${connections}

  public_key = peer.public
  private_key = peer.private
}

# optional transaction/block publishing for subscribers to receive various announcements
# intended for local services
publishing {

  broadcast = 127.0.0.1:${prefix}35
  #broadcast = "[::1]:${prefix}35"

  # ok to use the same keys as peer
  public_key = peer.public
  private_key = peer.private
}

# configuration of recorderd connections
proofing {

  public_key = proof.public
  private_key = proof.private
  signing_key = proof.sign

  # payments for future transfers
  # private keys are just samples for testing
  # (do not include such keys in a real configuration file)
  payment_address {
    # bitcoin key: "cPcHEqnqNG3Ze27Yqqxk8fQXmFVAgme1h1UT3HBN3MV4gERUVbVc"
    ${testnet_only}bitcoin = "msxN7C7cRNgbgyUzt3EcvrpmWXc59sZVN4"

    # litecoin key: "cUhoPFEKgWzxX9Ycynemjtvh4kEv3vcoVW6RgLaxzEVTGHFWF6WY"
    ${testnet_only}litecoin = "mjPkDNakVA4w4hJZ6WF7p8yKUV2merhyCM"

    ${livenet_only}bitcoin = "1HeFjMrDTjheiZrBYViLGgjovRZK9Ba5EQ"
    ${livenet_only}litecoin = "LYg45SVcJALHWHSMVkHSKAnbAEXAbhei7h"
  }

  publish =  "127.0.0.1:${prefix}40"
  #publish = "[::]:${prefix}40"
  submit =  "127.0.0.1:${prefix}41"
  #submit = "[::]:${prefix}41"

}

# setup for every payment service
payment {

  # set to true to get payment transactions directly from the discovery proxy
  use_discovery = ${proxy}

  discovery {
    sub_endpoint = ${discovery_pub}
    req_endpoint = ${discovery_rep}
  }

  # local bitcoin access to REST API
  bitcoin {
    url = ${bitcoin_url}
  }

  # local litecoin access to REST API
  litecoin {
    url = ${litecoin_url}
  }

}

# logging configuration
logging {
  size = ${log_size}
  count = ${log_count}
  console = ${log_console}

  # set the logging level for various modules
  # modules not overridden with get the value from DEFAULT
  # the default value for DEFAULT is "critical"
  levels {
    # DEFAULT = info
    # DEFAULT = debug
    DEFAULT = ${log_default}
  }

}
EOF

  # create identities
  run-bitmarkd --config="%${i}" --generate
done

